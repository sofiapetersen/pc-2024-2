/* Lugosi.java */
/* Generated By:JavaCC: Do not edit this line. Lugosi.java */
import ast.*;
import java.io.FileInputStream;
import java.io.File;
import java.io.PrintWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

public class Lugosi implements LugosiConstants {
    public static void main(String args[]) throws Exception {
      FileInputStream fs = new FileInputStream(new File(args[0]));
      Lugosi parser = new Lugosi(fs);

      Prog arvore = parser.Lugosi();
      geraCodigo(arvore, args[0]);
    }

    public static void geraCodigo(Prog prog, String arquivo) {
      try (PrintWriter out = new PrintWriter(new FileWriter(arquivo + ".c"))) {
          // Inclui bibliotecas
          out.println("#include <stdio.h>");
          out.println("#include <stdlib.h>");
          out.println("#include <stdbool.h>");
          out.println();

          // Gera as funções antes do main
          for (Fun f : prog.getFuns()) {
              f.geraCodigo(out, 0);
              out.println(); // Adiciona uma linha em branco entre funções
          }

          // Gera o main
          out.println("int main() {");
          prog.getMain().geraCodigo(out, 1);
          out.println("    return 0;");
          out.println("}");

      } catch (IOException e) {
          e.printStackTrace();
      }
}

  static final public Prog Lugosi() throws ParseException {Main main = null; ArrayList<Fun> funs = new ArrayList<>(); Fun fun = null;
    main = Main();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEF:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      fun = Funcao();
funs.add(fun);
    }
    jj_consume_token(0);
{if ("" != null) return new Prog( main, funs );}
    throw new Error("Missing return statement in function");
}

  static final public Main Main() throws ParseException {ArrayList<VarDecl> vars = null; ArrayList<Comando> coms = null;
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(ACHAVES);
    vars = VarDecl();
    coms = SeqComandos();
    jj_consume_token(FCHAVES);
{if ("" != null) return new Main(vars,coms);}
    throw new Error("Missing return statement in function");
}

  static final public ArrayList<VarDecl> VarDecl() throws ParseException {ArrayList<VarDecl> array = new ArrayList<>(); String tipo = null; Token id = null;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LET:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(LET);
      tipo = Tipo();
      id = jj_consume_token(ID);
      jj_consume_token(PONTOEVIRGULA);
array.add( new VarDecl( tipo, id.image ) );
    }
{if ("" != null) return array;}
    throw new Error("Missing return statement in function");
}

  static final public String Tipo() throws ParseException {String tipo = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FLOAT:{
      jj_consume_token(FLOAT);
tipo = ("float");
      break;
      }
    case BOOL:{
      jj_consume_token(BOOL);
tipo = ("bool");
      break;
      }
    case VOID:{
      jj_consume_token(VOID);
tipo = ("void");
      break;
      }
    case INT:{
      jj_consume_token(INT);
tipo = ("int");
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return tipo;}
    throw new Error("Missing return statement in function");
}

  static final public ArrayList<Comando> SeqComandos() throws ParseException {ArrayList<Comando> comandos = new ArrayList<>(); Comando comando = null;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case WHILE:
      case RETURN:
      case PRINTIO:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      comando = Comando();
comandos.add( comando );
    }
{if ("" != null) return comandos;}
    throw new Error("Missing return statement in function");
}

  static final public Comando Comando() throws ParseException {Comando comando = null; Token id = null; Expressao exp = null; ArrayList<Comando> bloco = null; int linha = getToken(1).beginLine;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      id = jj_consume_token(ID);
comando = ComandoTokenID(id);
      break;
      }
    case IF:{
      jj_consume_token(IF);
      jj_consume_token(APARENTESES);
      exp = Expressao();
      jj_consume_token(FPARENTESES);
      jj_consume_token(ACHAVES);
bloco = SeqComandos();
      jj_consume_token(FCHAVES);
      jj_consume_token(PONTOEVIRGULA);
comando = new CIf(linha, exp, bloco);
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      jj_consume_token(APARENTESES);
      exp = Expressao();
      jj_consume_token(FPARENTESES);
      jj_consume_token(DO);
      jj_consume_token(ACHAVES);
bloco = SeqComandos();
      jj_consume_token(FCHAVES);
      jj_consume_token(PONTOEVIRGULA);
comando = new CWhile(linha, exp, bloco);
      break;
      }
    case RETURN:{
      jj_consume_token(RETURN);
      exp = Expressao();
      jj_consume_token(PONTOEVIRGULA);
comando = new CReturn(linha, exp);
      break;
      }
    case PRINTIO:{
      jj_consume_token(PRINTIO);
      exp = Expressao();
      jj_consume_token(PONTOEVIRGULA);
comando = new CPrint(linha, exp);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return comando;}
    throw new Error("Missing return statement in function");
}

  static final public Comando ComandoTokenID(Token id) throws ParseException {Comando comando = null; Expressao exp = null; ArrayList<Expressao> args = null; int linha = getToken(1).beginLine;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOISPONTOSIGUAL:{
      jj_consume_token(DOISPONTOSIGUAL);
      comando = ComandoTokenIDAttrib(id);
{if ("" != null) return comando;}
      break;
      }
    case APARENTESES:{
      jj_consume_token(APARENTESES);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case APARENTESES:
      case TRUE:
      case FALSE:
      case NUM:
      case ID:{
        args = ListaExpressao();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(FPARENTESES);
      jj_consume_token(PONTOEVIRGULA);
{if ("" != null) return new CChamadaFun( linha, id.image, args );}
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public Comando ComandoTokenIDAttrib(Token id) throws ParseException {Expressao exp = null; int linha = getToken(1).beginLine;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case APARENTESES:
    case TRUE:
    case FALSE:
    case NUM:
    case ID:{
      exp = Expressao();
      jj_consume_token(PONTOEVIRGULA);
{if ("" != null) return new CAtribuicao( linha, id.image, exp );}
      break;
      }
    case READIO:{
      jj_consume_token(READIO);
      jj_consume_token(APARENTESES);
      jj_consume_token(FPARENTESES);
      jj_consume_token(PONTOEVIRGULA);
{if ("" != null) return new CReadInput( linha, id.image );}
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public Expressao Expressao() throws ParseException {Expressao arg1 = null; Expressao arg2 = null; String op = null;
    arg1 = Fator();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SUM:
      case SUB:
      case MULT:
      case DIV:
      case AND:
      case OR:
      case MENOR:
      case MAIOR:
      case IGUAL:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      op = OP();
      arg2 = Fator();
arg1 = new EOpExp(op, arg1, arg2);
    }
{if ("" != null) return arg1;}
    throw new Error("Missing return statement in function");
}

  static final public Expressao Fator() throws ParseException {Expressao fator = null; Token id = null; Token num = null; ArrayList<Expressao> args = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      id = jj_consume_token(ID);
fator = new EVar(id.image);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case APARENTESES:{
        jj_consume_token(APARENTESES);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case APARENTESES:
        case TRUE:
        case FALSE:
        case NUM:
        case ID:{
          args = ListaExpressao();
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        jj_consume_token(FPARENTESES);
fator = new EChamadaFun(id.image, args != null ? args : new ArrayList<Expressao>());
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      break;
      }
    case NUM:{
      num = jj_consume_token(NUM);
fator = new EFloat(Float.parseFloat(num.image));
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
fator = new ETrue();
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
fator = new EFalse();
      break;
      }
    case APARENTESES:{
      jj_consume_token(APARENTESES);
      fator = Expressao();
      jj_consume_token(FPARENTESES);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
fator = FatorAuxiliar(fator);
{if ("" != null) return fator;}
    throw new Error("Missing return statement in function");
}

  static final public Expressao FatorAuxiliar(Expressao fator) throws ParseException {ArrayList<Expressao> args = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case APARENTESES:{
      jj_consume_token(APARENTESES);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case APARENTESES:
      case TRUE:
      case FALSE:
      case NUM:
      case ID:{
        args = ListaExpressao();
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      jj_consume_token(FPARENTESES);
if (fator instanceof EVar)
      {
        {if ("" != null) return new EChamadaFun(((EVar) fator).var, args != null ? args : new ArrayList<>());}
      }
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
{if ("" != null) return fator;}
    throw new Error("Missing return statement in function");
}

  static final public String OP() throws ParseException {String op = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SUM:{
      jj_consume_token(SUM);
op = "+";
      break;
      }
    case SUB:{
      jj_consume_token(SUB);
op = "-";
      break;
      }
    case MULT:{
      jj_consume_token(MULT);
op = "*";
      break;
      }
    case DIV:{
      jj_consume_token(DIV);
op = "/";
      break;
      }
    case AND:{
      jj_consume_token(AND);
op = "&&";
      break;
      }
    case OR:{
      jj_consume_token(OR);
op = "||";
      break;
      }
    case MENOR:{
      jj_consume_token(MENOR);
op = "<";
      break;
      }
    case MAIOR:{
      jj_consume_token(MAIOR);
op = ">";
      break;
      }
    case IGUAL:{
      jj_consume_token(IGUAL);
op = "==";
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return op;}
    throw new Error("Missing return statement in function");
}

  static final public ArrayList<Expressao> ListaExpressao() throws ParseException {ArrayList<Expressao> lista = new ArrayList<Expressao>(); Expressao exp = null;
    exp = Expressao();
lista.add(exp);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRGULA:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_5;
      }
      jj_consume_token(VIRGULA);
      exp = Expressao();
lista.add(exp);
    }
{if ("" != null) return lista;}
    throw new Error("Missing return statement in function");
}

  static final public Fun Funcao() throws ParseException {String nome = null; String retorno = null; ArrayList<ParamFormalFun> params = new ArrayList<>(); ArrayList<VarDecl> vars = new ArrayList<>(); ArrayList<Comando> body = new ArrayList<>(); Token id = null;
    jj_consume_token(DEF);
    retorno = Tipo();
    id = jj_consume_token(ID);
    jj_consume_token(APARENTESES);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VOID:
    case INT:
    case FLOAT:
    case BOOL:{
      params = ListaArg();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(FPARENTESES);
    jj_consume_token(ACHAVES);
    vars = VarDecl();
    body = SeqComandos();
    jj_consume_token(FCHAVES);
{if ("" != null) return new Fun( id.image, params, retorno, vars, body );}
    throw new Error("Missing return statement in function");
}

  static final public ArrayList<ParamFormalFun> ListaArg() throws ParseException {ArrayList<ParamFormalFun> lista = new ArrayList<>(); String tipo = null; Token id = null;
    tipo = Tipo();
    id = jj_consume_token(ID);
lista.add(new ParamFormalFun(tipo, id.image));
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRGULA:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_6;
      }
      jj_consume_token(VIRGULA);
      tipo = Tipo();
      id = jj_consume_token(ID);
lista.add(new ParamFormalFun(tipo, id.image));
    }
{if ("" != null) return lista;}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LugosiTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x2000,0x1c80,0x360000,0x360000,0xc08000,0xc000,0xc08000,0xff000000,0xc08000,0x8000,0xc08000,0xc08000,0x8000,0xff000000,0x0,0x1c80,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x10,0x0,0x0,0x40,0x40,0x60,0x0,0x68,0x1,0x60,0x0,0x60,0x60,0x0,0x1,0x2,0x0,0x2,};
	}

  /** Constructor with InputStream. */
  public Lugosi(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Lugosi(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new LugosiTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Lugosi(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new LugosiTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new LugosiTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Lugosi(LugosiTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LugosiTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[39];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 18; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 39; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
