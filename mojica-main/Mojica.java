/* Generated By:JavaCC: Do not edit this line. Mojica.java */
import java.io.*;
import ast.*;
import inter.*;
import tc.*;
import llvm.*;
import java.util.ArrayList;

public class Mojica implements MojicaConstants {

  public static void main(String args[]) throws ParseException,IOException, Exception {

    Mojica parser;
    Prog ast;
    try{
      switch (args[0]){
        case "-inter":
          testFileName(args[1]);
          parser = new Mojica(new FileInputStream(args[1]));
          ast = parser.Prog();
          TypeChecker.typeCheckProg(ast);
          InterProg.interpret(ast);
          break;
        default:
          testFileName(args[0]);
          String fileName = getFileName(args[0]);
          parser = new Mojica(new FileInputStream(args[0]));
          ast = parser.Prog();
          TypeChecker.typeCheckProg(ast);
          LLVM.genLLVM(fileName,ast);

      }

    }
    catch(TokenMgrError e){
      System.out.println("------ ERRO L\u00c9XICO ------\u005cn"+e);
    }
    catch(ParseException e){
      System.out.println("------ ERRO SINT\u00c1TICO ------\u005cn"+e);
    }
    catch(TypeException e){
      System.out.println("------ ERRO SEM\u00c2NTICO ------\u005cn"+e);
    }
    catch(Exception e){
      System.out.println(e);
    }
  }

  static void testFileName(String filename) throws Exception
  {

    String ext = filename.substring(filename.length()-4,filename.length());
    if(!ext.equals(".moj")){ throw new Exception("Arquivo deve possuir a extens\u00e3o .moj");}

  }
  static String getFileName(String filename)
  {
    String name = filename.substring(0,filename.length()-4);
    return name;
  }

//PROG -> MAIN FUNC*
  static final public Prog Prog() throws ParseException {
 Main main; ArrayList<Fun> functions = new ArrayList<Fun>(); Fun fun;
    main = Main();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FN:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      fun = Fun();
                         functions.add(fun);
    }
  {if (true) return new Prog(main,functions);}
    jj_consume_token(0);
    throw new Error("Missing return statement in function");
  }

//MAIN -> "main" "(" ")" "do" VARDECL SEQ "end" 
  static final public Main Main() throws ParseException {
 ArrayList<VarDecl> vars=new ArrayList<VarDecl>(); ArrayList<Comando> seq;
    jj_consume_token(MAIN);
    jj_consume_token(AP);
    jj_consume_token(FP);
    jj_consume_token(DO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TFLOAT:
    case TVOID:
    case TBOOL:
      vars = VarDecl();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    seq = Seq();
    jj_consume_token(END);
   {if (true) return new Main(vars,seq);}
    throw new Error("Missing return statement in function");
  }

// VARDECL -> (TYPE ID ";")+
  static final public ArrayList<VarDecl> VarDecl() throws ParseException {
 String type; Token var; ArrayList<VarDecl> decls = new ArrayList<VarDecl>();
    label_2:
    while (true) {
      type = Type();
      var = jj_consume_token(ID);
      jj_consume_token(PV);
                               decls.add(new VarDecl(type,var.image));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TFLOAT:
      case TVOID:
      case TBOOL:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
    }
    {if (true) return decls;}
    throw new Error("Missing return statement in function");
  }

//TYPE -> "Float" | "Bool" | "Void"
  static final public String Type() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TFLOAT:
      t = jj_consume_token(TFLOAT);
      break;
    case TBOOL:
      t = jj_consume_token(TBOOL);
      break;
    case TVOID:
      t = jj_consume_token(TVOID);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

//SEQ -> COM+
  static final public ArrayList<Comando> Seq() throws ParseException {
 ArrayList<Comando> comandos = new ArrayList<Comando>(); Comando com;
    label_3:
    while (true) {
      com = Com();
               comandos.add(com);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case PRINT:
      case RETURN:
      case ID:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
    }
    {if (true) return comandos;}
    throw new Error("Missing return statement in function");
  }

// BLOCO -> "do" SEQ "end"
  static final public ArrayList<Comando> Bloco() throws ParseException {
 ArrayList<Comando> comandos;
    jj_consume_token(DO);
    comandos = Seq();
    jj_consume_token(END);
     {if (true) return comandos;}
    throw new Error("Missing return statement in function");
  }

//COM -> ID "<-" EXP ";"
//            | ID "(" LISTEXP? ")"
//           | "if" EXP BLOCO
//           | "while" EXP BLOCO
//          |  ID "<-" "readLine" "(" ")" ";"
//          | "print" EXP ";"
  static final public Comando Com() throws ParseException {
 Token var; Token c;Exp exp; ArrayList<Exp> args=null; Comando comando=null; ArrayList<Comando> bloco;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      var = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATRIB:
        jj_consume_token(ATRIB);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case READFLOAT:
          jj_consume_token(READFLOAT);
          jj_consume_token(AP);
          jj_consume_token(FP);
                                                    comando = new CReadInput(var.beginLine,var.image);
          break;
        case AP:
        case TRUE:
        case FALSE:
        case FLOAT:
        case ID:
          exp = Exp();
                                         comando = new CAtribuicao(var.beginLine,var.image,exp);
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case AP:
        jj_consume_token(AP);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AP:
        case TRUE:
        case FALSE:
        case FLOAT:
        case ID:
          args = ListExp();
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        jj_consume_token(FP);
                                                comando = new CChamadaFun(var.beginLine,var.image,args);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(PV);
      break;
    case IF:
      c = jj_consume_token(IF);
      exp = Exp();
      bloco = Bloco();
                                    comando = new CIf(c.beginLine,exp,bloco);
      break;
    case WHILE:
      c = jj_consume_token(WHILE);
      exp = Exp();
      bloco = Bloco();
                                       comando = new CWhile(c.beginLine,exp,bloco);
      break;
    case PRINT:
      c = jj_consume_token(PRINT);
      exp = Exp();
      jj_consume_token(PV);
                             comando = new CPrint(c.beginLine,exp);
      break;
    case RETURN:
      c = jj_consume_token(RETURN);
      exp = Exp();
      jj_consume_token(PV);
                              comando = new CReturn(c.beginLine,exp);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return comando;}
    throw new Error("Missing return statement in function");
  }

//LISTEXP -> EXPÂ  ("," EXP)*
  static final public ArrayList<Exp> ListExp() throws ParseException {
 ArrayList<Exp> exps = new ArrayList<Exp>(); Exp exp;
    exp = Exp();
             exps.add(exp);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      jj_consume_token(VIRG);
      exp = Exp();
                                                exps.add(exp);
    }
   {if (true) return exps;}
    throw new Error("Missing return statement in function");
  }

// EXP -> FLOAT  | ID | ID "(" LISTEXP ")" | "(" EXP OP EXP ")"
  static final public Exp Exp() throws ParseException {
 Exp exp=null; Token te; ArrayList<Exp> listaExp = null; boolean isFunCall=false; Exp arg1,arg2;String op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT:
      te = jj_consume_token(FLOAT);
                exp= new EFloat(Float.parseFloat(te.image));
      break;
    case TRUE:
      jj_consume_token(TRUE);
              exp = new ETrue();
      break;
    case FALSE:
      jj_consume_token(FALSE);
               exp = new EFalse();
      break;
    case ID:
      te = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AP:
        jj_consume_token(AP);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AP:
        case TRUE:
        case FALSE:
        case FLOAT:
        case ID:
          listaExp = ListExp();
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        jj_consume_token(FP);
                                                isFunCall=true;
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
           if (isFunCall) {exp = new EChamadaFun(te.image,listaExp);}else{ exp = new EVar(te.image);}
      break;
    case AP:
      jj_consume_token(AP);
      arg1 = Exp();
      op = Op();
      arg2 = Exp();
      jj_consume_token(FP);
                                               exp = new EOpExp(op,arg1,arg2);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

// OP -> "+" | "-" | "/" | "*" | "&" | "|" | ">" | "<" | ">=" | "<="
  static final public String Op() throws ParseException {
 Token op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SOMA:
      op = jj_consume_token(SOMA);
      break;
    case MULT:
      op = jj_consume_token(MULT);
      break;
    case DIV:
      op = jj_consume_token(DIV);
      break;
    case SUB:
      op = jj_consume_token(SUB);
      break;
    case REM:
      op = jj_consume_token(REM);
      break;
    case AND:
      op = jj_consume_token(AND);
      break;
    case OR:
      op = jj_consume_token(OR);
      break;
    case MENOR:
      op = jj_consume_token(MENOR);
      break;
    case MAIOR:
      op = jj_consume_token(MAIOR);
      break;
    case MAIORIG:
      op = jj_consume_token(MAIORIG);
      break;
    case MENORIG:
      op = jj_consume_token(MENORIG);
      break;
    case IG:
      op = jj_consume_token(IG);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return op.image;}
    throw new Error("Missing return statement in function");
  }

//FUN -> "fn" ID "(" LISTAARG? ")" ":" TYPE "do" VARDECL SEQ "end"
  static final public Fun Fun() throws ParseException {
 Token nome; ArrayList<ParamFormalFun> params = new ArrayList<ParamFormalFun>(); String retorno;        ArrayList<VarDecl> vars = new ArrayList<VarDecl>(); ArrayList<Comando> body;
    jj_consume_token(FN);
    nome = jj_consume_token(ID);
    jj_consume_token(AP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TFLOAT:
    case TVOID:
    case TBOOL:
      params = ListArg();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(FP);
    jj_consume_token(DP);
    retorno = Type();
    jj_consume_token(DO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TFLOAT:
    case TVOID:
    case TBOOL:
      vars = VarDecl();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    body = Seq();
    jj_consume_token(END);
     {if (true) return new Fun(nome.image, params, retorno,vars,body);}
    throw new Error("Missing return statement in function");
  }

//ARGLIST -> TYPE ID ( "," TYPE ID )*
  static final public ArrayList<ParamFormalFun> ListArg() throws ParseException {
 String type; Token  var; ArrayList<ParamFormalFun> params = new ArrayList<ParamFormalFun>();
    type = Type();
    var = jj_consume_token(ID);
                         params.add(new ParamFormalFun(type,var.image));
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_5;
      }
      jj_consume_token(VIRG);
      type = Type();
      var = jj_consume_token(ID);
                                 params.add(new ParamFormalFun(type,var.image));
    }
   {if (true) return params;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MojicaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400,0x7000,0x7000,0x7000,0xc0060000,0x40,0x40,0x8040,0xc0060000,0x10000,0x40,0x40,0x40,0x1ff80000,0x7000,0x7000,0x10000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x40,0x76,0x66,0x0,0x40,0x0,0x66,0x0,0x66,0x9,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Mojica(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Mojica(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MojicaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Mojica(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MojicaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Mojica(MojicaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MojicaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[39];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 39; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
